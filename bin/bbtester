#!/usr/bin/perl
use warnings;
use strict;

use Getopt::Long;

use Proc::Background;

my $ip = '0.0.0.0';
my $port = 7800;
my $help;

if (@ARGV && $ARGV[0] !~ /(?:start|stop)/ || ! @ARGV){
    $help = 1;
}
my $op = shift @ARGV;

GetOptions(
    "ip=s"   => \$ip,
    "port=i" => \$port,
    "help"   => \$help,
);

if ($help){
    print <<'EOF';
Usage: 

bbtester start [--ip 0.0.0.0] [--port 7800]]
bbtester stop

EOF
exit;
}

my $pid_file = $^O =~ /MSWin/
    ? 'c:/brewbuild/brewbuild.pid'
    : "$ENV{HOME}/brewbuild.pid";

if ($op eq 'stop'){
    open my $fh, '<', $pid_file or die $!;
    my $pid = <$fh>;
    close $fh;
    print "\nStopping the Test::BrewBuild test server at PID $pid...\n\n";
    kill 'KILL', ($pid);
    unlink $pid_file;
    exit;
}

if ($op eq 'start'){
    if (-f $pid_file){
        my $fh;
        open $fh, '<', $pid_file or die $!;
        my $existing_pid = <$fh>;
        close $fh;

        if ($existing_pid){
            if (kill(0, $existing_pid)){
                die "brewbuild listener is already running...\n";
            }
        }
    }

    my ($perl, @args, $work_dir);

    if ($^O =~ /MSWin/){
        $work_dir = 'c:/brewbuild';

        $perl = (split /\n/, `where perl.exe`)[0];
        my $brew = (split /\n/, `where brewbuild`)[0];

        @args = ($brew, '-L');
    }
    else {
        $work_dir = "$ENV{HOME}/brewbuild";

        $perl = 'perl';
        @args = qw(brewbuild -L);
    }

    chdir $work_dir or die "can't change to dir $work_dir: $!";

    my $tester = Proc::Background->new($perl, @args);
    my $pid = $tester->pid;

    print "\nStarted the Test::BrewBuild test server at PID $pid on IP " .
      "address $ip and TCP port $port...\n\n";


    open my $wfh, '>', $pid_file or die $!;
    print $wfh $pid;
    close $wfh;

    # error check for brewbuild

    if (-f $pid_file){
        sleep 1;
        my $fh;
        open $fh, '<', $pid_file or die $!;
        my $existing_pid = <$fh>;
        close $fh;

        if ($existing_pid){
            if (! kill(0, $existing_pid)){
                die "error! run brewbuild -L at the command line and " .
                    "check for failure\n\n";
            }
        }
    }
}

=pod

=head1 NAME

bbtester - Remote Unix testing platform server daemon for L<Test::BrewBuild>'s
L<brewbuild>.

=head1 SYNOPSIS

This script is for Unix use. Please use C<bbtestersvc> for Windows.

Listen for incoming C<brewbuild> build requests on all IPs and port 7800 (TCP)

    bbtester start

Listen using a different IP/Port pair

    bbtester start -i 192.168.10.5 -p 7789

Stop the service from running

    bbtester stop

=head1 DESCRIPTION

This script is the listener end of the distributed C<Test::BrewBuild> testing
environment.

C<bbtester> daemonizes itself, and listens to incoming requests from a
C<brewbuild> test dispatch server.

We then run the appropriate commands, and return the results to the dispatcher
for processing.

=head1 AUTHOR

Steve Bertrand, C<< <steveb at cpan.org> >>

=head1 CONTRIBUTING

Any and all feedback and help is appreciated. A Pull Request is the preferred
method of receiving changes (L<https://github.com/stevieb9/p5-test-brewbuild>),
but regular patches through the bug tracker, or even just email discussions are
welcomed.

=head1 BUGS

L<https://github.com/stevieb9/p5-test-brewbuild/issues>

=head1 SUPPORT

You can find documentation for this script and module with the perldoc command.

    perldoc bbtester
    perldoc brewbuild
    perldoc Test::BrewBuild

=head1 SEE ALSO

Berrybrew for Windows:

L<https://github.com/dnmfarrell/berrybrew>

Perlbrew for Unixes:

L<http://perlbrew.pl>

=head1 LICENSE AND COPYRIGHT

Copyright 2016 Steve Bertrand.

This program is free software; you can redistribute it and/or modify it
under the terms of either: the GNU General Public License as published
by the Free Software Foundation; or the Artistic License.

See L<http://dev.perl.org/licenses/> for more information.

=cut

