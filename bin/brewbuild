#!/usr/bin/perl
use warnings;
use strict;

use Getopt::Long;
Getopt::Long::Configure('pass_through');
use Test::BrewBuild;

our $VERSION = '0.05';

my (%args, $count, $help);

GetOptions(
    "debug=i"     => \$args{debug},
    "reload"    => \$args{remove},
    "remove"    => \$args{remove},
    "version=s@" => \$args{version},
    "plugin=s"  => \$args{plugin},
    "count=i"   => \$count,
    "help"      => \$help,
);

if ($help){
    print <<EOF;
    
    Usage: perl build/brewbuild.pl [options]

    Options:

    --plugin | -p:  String, the module name of the exec command plugin to use
    --debug  | -d:  Int (0-7), sets logging verbosity
    --count  | -c:  Integer, how many random versions of perl to install
    --remove | -r:  Bool, remove all installed perls (less the current one)
                    before installation of new ones
    --verion | -v:  String, the number portion of an available perl version
                    according to "*brew available". Multiple versions can be
                    sent in at once
    --help   | -h:  print this help message
EOF
exit;
}

my $brew = Test::BrewBuild->new(%args);

my $log = $brew->log()->child('brewbuild.pl');

my @opts;
for (keys %args){
    push @opts, "$_ => $args{$_}" if defined $args{$_};
}
$log->_7("executing run() with args: " . join ', ', @opts);

$brew->run($count);

=pod

=head1 NAME

brewbuild - Perl/Berry brew unit testing automation across installed perl
versions (Windows and Unix).

=for html
<a href="http://travis-ci.org/stevieb9/p5-test-brewbuild"><img src="https://secure.travis-ci.org/stevieb9/p5-test-brewbuild.png"/>
<a href='https://coveralls.io/github/stevieb9/p5-test-brewbuild?branch=master'><img src='https://coveralls.io/repos/stevieb9/p5-test-brewbuild/badge.svg?branch=master&service=github' alt='Coverage Status' /></a>

=head1 SYNOPSIS

You must be in the root directory of the distribution you want to test. Note
that all arguments passed into the script have single-letter counterparts. Also
note that each time the command is run, your unit tests will be run on all
installed *brew instances.

    # run all unit tests against all installed instances with no other action

    brewbuild

    # use a custom plugin containing the build/test commands to pass to
    # perlbrew (can also be set in $ENV{TBB_PLUGIN} for persistence)

    brewbuild --plugin 'Test::BrewBuild::Plugin::DefaultExec' # default

    # install three new instances of perl, randomly

    brewbuild --count 3

    # enable debugging, and run against all installed instances (can be used
    # in conjunction with all other args). Use 0-7 as the argument to it, the
    # default is 4

    brewbuild --debug

    # remove all perl instances (less the currently used one), install two
    # new random versions, and run tests against all installed perls

    brewbuild --remove --count 2

    # install all available perl versions, and run tests against all of them

    brewbuild --count -1

    # print usage information

    brewbuild --help

    # install a specific version and run tests on all instances (include just
    # the number portion of the version per "perlbrew available" or "berrybrew
    # available"

    brewbuild --version 5.20.3

    # multiple versions can be passed in at once

    brewbuild -v 5.20.3 -v 5.14.4 -v 5.23.5

=head1 DESCRIPTION

This C<brewbuild> script installed by the L<Test::Brewbuild> module allows you
to perform your unit tests across all of your Perlbrew (Unix) or Berrybrew
(Windows) Perl instances, with the ability to very easily create your own
plugins that contain the code that C<perlbrew/berrybrew exec> will process.
(See L<Test::BrewBuild::Plugin::DefaultExec> for an example).

For Windows, you'll need to install Berrybrew (see L<SEE ALSO> for details).
For Unix, you'll need Perlbrew.

It allows you to remove and reinstall on each test run, install random versions
of perl, or install specific versions.

All unit tests are run against all installed instances.

The actual module is just a helper for the installed script, and isn't designed
for end-user use.

=head1 AUTHOR

Steve Bertrand, C<< <steveb at cpan.org> >>

=head2 CONTRIBUTING

Any and all feedback and help is appreciated. A Pull Request is the preferred
method of receiving changes (L<https://github.com/stevieb9/p5-test-brewbuild>),
but regular patches through the bug tracker, or even just email discussions are
welcomed.

=head1 BUGS

L<https://github.com/stevieb9/p5-test-brewbuild/issues>

=head1 SUPPORT

You can find documentation for this script and module with the perldoc command.

    perldoc brewbuild
    perldoc Test::BrewBuild

=head1 SEE ALSO

Berrybrew for Windows:

L<https://github.com/dnmfarrell/berrybrew>

Perlbrew for Unixes:

L<http://perlbrew.pl>

=head1 LICENSE AND COPYRIGHT

Copyright 2016 Steve Bertrand.

This program is free software; you can redistribute it and/or modify it
under the terms of either: the GNU General Public License as published
by the Free Software Foundation; or the Artistic License.

See L<http://dev.perl.org/licenses/> for more information.